"""switch status to enum

Revision ID: 0e014c6dcb9c
Revises: 8a05d62f7d6a
Create Date: 2024-04-26 16:48:39.287926

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0e014c6dcb9c'
down_revision: Union[str, None] = '8a05d62f7d6a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    application_status_enum = sa.Enum('ACCEPTED', 'REJECTED', 'IN_PROGRESS', 'WAITING', 'PROCESSING', name='applicationstatusenum')
    application_status_enum.create(op.get_bind(), checkfirst=True)
    op.alter_column('admin_processing_applications', 'admin_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('admin_processing_applications', 'application_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('application_answers', 'application_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('application_answers', 'question_number',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('application_answers', 'answer_text',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('application_answers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('application_statuses', 'status',
               existing_type=sa.VARCHAR(length=266),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('application_statuses', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.add_column('applications', sa.Column('status', application_status_enum, nullable=True))
    status_mapping = {
    1: 'IN_PROGRESS',
    2: 'WAITING',
    3: 'ACCEPTED',
    4: 'REJECTED',
    5: 'PROCESSING'
        }
    for id, status in status_mapping.items():
        op.execute(f"UPDATE applications SET status = '{status}' WHERE status_id = {id}")
    op.drop_constraint('applications_status_id_fkey', 'applications', type_='foreignkey')
    op.alter_column('applications', 'status',nullable=False)
    op.drop_column('applications', 'status_id')
    op.alter_column('applications', 'user_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    op.alter_column('applications', 'decision_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('applications', 'rejection_reason',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('applications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.add_column('applications', sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('applications_status_id_fkey', 'applications', 'application_statuses', ['status_id'], ['id'], ondelete='CASCADE')
    op.alter_column('applications', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('applications', 'rejection_reason',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('applications', 'decision_date',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('applications', 'user_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.drop_column('applications', 'status')
    op.alter_column('application_statuses', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('application_statuses', 'status',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=266),
               nullable=True)
    op.alter_column('application_answers', 'created_at',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('application_answers', 'answer_text',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('application_answers', 'question_number',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('application_answers', 'application_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('admin_processing_applications', 'application_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('admin_processing_applications', 'admin_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    application_status_enum = sa.Enum('ACCEPTED', 'REJECTED', 'IN_PROGRESS', 'WAITING', 'PROCESSING', name='applicationstatusenum')
    application_status_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
